{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { MustMatch } from '@app/_helpers';\nvar TokenStatus = /*#__PURE__*/(() => {\n  (function (TokenStatus) {\n    TokenStatus[TokenStatus[\"Validating\"] = 0] = \"Validating\";\n    TokenStatus[TokenStatus[\"Valid\"] = 1] = \"Valid\";\n    TokenStatus[TokenStatus[\"Invalid\"] = 2] = \"Invalid\";\n  })(TokenStatus || (TokenStatus = {}));\n  return TokenStatus;\n})();\nlet ResetPasswordComponent = class ResetPasswordComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.TokenStatus = TokenStatus;\n    this.tokenStatus = TokenStatus.Validating;\n    this.token = null;\n    this.loading = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', Validators.required]\n    }, {\n      validator: MustMatch('password', 'confirmPassword')\n    });\n    const token = this.route.snapshot.queryParams['token'];\n    // remove token from url to prevent http referer leakage\n    this.router.navigate([], {\n      relativeTo: this.route,\n      replaceUrl: true\n    });\n    this.accountService.validateResetToken(token).pipe(first()).subscribe({\n      next: () => {\n        this.token = token;\n        this.tokenStatus = TokenStatus.Valid;\n      },\n      error: () => {\n        this.tokenStatus = TokenStatus.Invalid;\n      }\n    });\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.accountService.resetPassword(this.token, this.f.password.value, this.f.confirmPassword.value).pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success('Password reset successful, you can now login', {\n          keepAfterRouteChange: true\n        });\n        this.router.navigate(['../login'], {\n          relativeTo: this.route\n        });\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.loading = false;\n      }\n    });\n  }\n};\nResetPasswordComponent = __decorate([Component({\n  templateUrl: 'reset-password.component.html'\n})], ResetPasswordComponent);\nexport { ResetPasswordComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}