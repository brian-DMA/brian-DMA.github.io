{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class ErrorInterceptor {\n  constructor(accountService) {\n    this.accountService = accountService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(err => {\n      if ([401, 403].includes(err.status) && this.accountService.accountValue) {\n        // auto logout if 401 or 403 response returned from api\n        this.accountService.logout();\n      }\n      const error = err && err.error && err.error.message || err.statusText;\n      console.error(err);\n      return throwError(error);\n    }));\n  }\n  static #_ = this.ɵfac = function ErrorInterceptor_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}